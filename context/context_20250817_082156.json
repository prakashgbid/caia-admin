{
  "timestamp": "2025-08-17T08:21:56.574350",
  "hours_covered": 1,
  "projects": {
    "standalone-apps": {
      "name": "standalone-apps",
      "path": "/Users/MAC/Documents/projects/standalone-apps",
      "last_modified": "2025-08-16T20:35:18.653775",
      "size_bytes": 3079983,
      "file_count": 282,
      "directory_count": 98,
      "recent_changes": [],
      "git_info": {
        "commits": [],
        "modified_files": [],
        "untracked_files": [],
        "branches": [],
        "current_branch": null
      },
      "key_files": {
        "package.json": "adp/package.json"
      },
      "technologies": [
        "TypeScript",
        "Node.js"
      ],
      "todos": [
        {
          "file": "roulette-community/src/app/layout.tsx",
          "line": 31,
          "content": "// TODO: Get user from auth context when implementing authentication"
        },
        {
          "file": "roulette-community/src/features/currency/service.ts",
          "line": 262,
          "content": "// TODO: Integrate with actual payment processor (Stripe)"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 478,
          "content": "// TODO: Implement actual sending logic"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 492,
          "content": "// TODO: Implement actual sending logic"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 550,
          "content": "upsellRate: 0, // TODO: Calculate"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 551,
          "content": "churnRate: 0, // TODO: Calculate"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 552,
          "content": "reactivationRate: 0, // TODO: Calculate"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 556,
          "content": "refundRate: 0, // TODO: Track refunds"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 557,
          "content": "paymentFailureRate: 0, // TODO: Track failed payments"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 575,
          "content": "// TODO: Implement more sophisticated calculations"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 621,
          "content": "// TODO: Implement growth calculations"
        }
      ],
      "dependencies": {
        "npm": [
          "@sats/core",
          "express",
          "socket.io",
          "ioredis",
          "bull",
          "pg",
          "winston",
          "zod",
          "uuid"
        ]
      }
    },
    "docs": {
      "name": "docs",
      "path": "/Users/MAC/Documents/projects/docs",
      "last_modified": "2025-08-16T20:35:18.675280",
      "size_bytes": 77221,
      "file_count": 7,
      "directory_count": 0,
      "recent_changes": [],
      "git_info": {
        "commits": [],
        "modified_files": [],
        "untracked_files": [],
        "branches": [],
        "current_branch": null
      },
      "key_files": {},
      "technologies": [],
      "todos": [],
      "dependencies": {}
    },
    "old-projects": {
      "name": "old-projects",
      "path": "/Users/MAC/Documents/projects/old-projects",
      "last_modified": "2025-08-16T20:35:18.625531",
      "size_bytes": 36798673,
      "file_count": 438,
      "directory_count": 197,
      "recent_changes": [],
      "git_info": {
        "commits": [],
        "modified_files": [],
        "untracked_files": [],
        "branches": [],
        "current_branch": null
      },
      "key_files": {
        "package.json": "chatgpt-mcp-server/package.json",
        "requirements.txt": "chatgpt-mcp-server/requirements.txt"
      },
      "technologies": [
        "TypeScript",
        "Python",
        "Node.js"
      ],
      "todos": [
        {
          "file": "smart-agents-training-system/src/core/decision-engine/DecisionEngine.ts",
          "line": 89,
          "content": "// TODO: Implement expertise weighting based on domain knowledge"
        },
        {
          "file": "smart-agents-training-system/src/core/llm-alliance/SuperIntelligentAgent.ts",
          "line": 313,
          "content": "// TODO: Implement proper semantic similarity"
        },
        {
          "file": "smart-agents-training-system/src/core/llm-alliance/SuperIntelligentAgent.ts",
          "line": 359,
          "content": "vector: [], // TODO: Generate embeddings"
        },
        {
          "file": "smart-agents-training-system/src/core/llm-alliance/SuperIntelligentAgent.ts",
          "line": 373,
          "content": "// TODO: Implement learning mechanism"
        },
        {
          "file": "smart-agents-training-system/src/core/llm-alliance/SuperIntelligentAgent.ts",
          "line": 413,
          "content": "// TODO: Add more detailed metrics"
        },
        {
          "file": "omnimind/modules/o-s-a-autonomous/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "omnimind/modules/o-s-a-autonomous/tests/test_autonomix.py",
          "line": 19,
          "content": "# TODO: Add actual tests based on functionality"
        },
        {
          "file": "omnimind/modules/o-s-a-autonomous/tests/test_integration.py",
          "line": 13,
          "content": "# TODO: Add integration tests"
        },
        {
          "file": "omnimind/modules/o-s-a-autonomous/examples/basic_usage.py",
          "line": 12,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "omnimind/modules/o-s-a-autonomous/examples/advanced_usage.py",
          "line": 12,
          "content": "# TODO: Add configuration options"
        },
        {
          "file": "omnimind/modules/o-s-a-autonomous/examples/advanced_usage.py",
          "line": 16,
          "content": "# TODO: Add advanced usage examples"
        },
        {
          "file": "omnimind/modules/smart-planner/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "omnimind/modules/smart-planner/tests/test_smart_planner.py",
          "line": 19,
          "content": "# TODO: Add actual tests based on functionality"
        },
        {
          "file": "omnimind/modules/smart-planner/tests/test_integration.py",
          "line": 13,
          "content": "# TODO: Add integration tests"
        },
        {
          "file": "omnimind/modules/smart-planner/examples/basic_usage.py",
          "line": 12,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "omnimind/modules/smart-planner/examples/advanced_usage.py",
          "line": 12,
          "content": "# TODO: Add configuration options"
        },
        {
          "file": "omnimind/modules/smart-planner/examples/advanced_usage.py",
          "line": 16,
          "content": "# TODO: Add advanced usage examples"
        },
        {
          "file": "omnimind/modules/langgraph-orchestrator/src/flowmaster/orchestrator.py",
          "line": 491,
          "content": "# TODO: Implement full swarm pattern"
        },
        {
          "file": "omnimind/modules/langgraph-orchestrator/src/flowmaster/orchestrator.py",
          "line": 504,
          "content": "# TODO: Implement full hierarchical pattern"
        },
        {
          "file": "omnimind/modules/self-learning/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "omnimind/modules/self-learning/tests/test_self_learning.py",
          "line": 12,
          "content": "# TODO: Add actual tests based on module functionality"
        },
        {
          "file": "omnimind/modules/self-learning/examples/basic_usage.py",
          "line": 9,
          "content": "# TODO: Add actual usage example"
        },
        {
          "file": "omnimind/modules/self-learning/src/evolux/__init__.py",
          "line": 6,
          "content": "# TODO: Add actual imports based on module structure"
        },
        {
          "file": "omnimind/modules/self-learning/src/evolux/__init__.py",
          "line": 9,
          "content": "# TODO: Add exported classes and functions"
        },
        {
          "file": "omnimind/modules/auto-coder/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "omnimind/modules/auto-coder/tests/test_auto_coder.py",
          "line": 19,
          "content": "# TODO: Add actual tests based on functionality"
        },
        {
          "file": "omnimind/modules/auto-coder/tests/test_integration.py",
          "line": 13,
          "content": "# TODO: Add integration tests"
        },
        {
          "file": "omnimind/modules/auto-coder/examples/basic_usage.py",
          "line": 12,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "omnimind/modules/auto-coder/examples/advanced_usage.py",
          "line": 12,
          "content": "# TODO: Add configuration options"
        },
        {
          "file": "omnimind/modules/auto-coder/examples/advanced_usage.py",
          "line": 16,
          "content": "# TODO: Add advanced usage examples"
        },
        {
          "file": "omnimind/modules/auto-coder/src/codeforge/core.py",
          "line": 123,
          "content": "return GeneratedCode(code=f'# TODO: Implement {request.description}', language=request.language, description=request.description)"
        },
        {
          "file": "omnimind/modules/auto-coder/src/codeforge/core.py",
          "line": 229,
          "content": "variables[var] = f'# TODO: {var}'"
        },
        {
          "file": "omnimind/modules/auto-coder/src/codeforge/core.py",
          "line": 330,
          "content": "library_code += f'\\nimport {best_solution.name}\\n\\n# TODO: Implement using {best_solution.name}\\n# See documentation: {best_solution.url}\\n'"
        },
        {
          "file": "omnimind/modules/deep-reasoner/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "omnimind/modules/deep-reasoner/tests/test_deep_reasoner.py",
          "line": 19,
          "content": "# TODO: Add actual tests based on functionality"
        },
        {
          "file": "omnimind/modules/deep-reasoner/tests/test_integration.py",
          "line": 13,
          "content": "# TODO: Add integration tests"
        },
        {
          "file": "omnimind/modules/deep-reasoner/examples/basic_usage.py",
          "line": 12,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "omnimind/modules/deep-reasoner/examples/advanced_usage.py",
          "line": 12,
          "content": "# TODO: Add configuration options"
        },
        {
          "file": "omnimind/modules/deep-reasoner/examples/advanced_usage.py",
          "line": 16,
          "content": "# TODO: Add advanced usage examples"
        },
        {
          "file": "omnimind/src/core/agent_orchestrator.py",
          "line": 483,
          "content": "# TODO: Implement swarm pattern"
        },
        {
          "file": "omnimind/src/core/agent_orchestrator.py",
          "line": 488,
          "content": "# TODO: Implement hierarchical pattern"
        },
        {
          "file": "omnimind/src/core/code_generator.py",
          "line": 274,
          "content": "code=f\"# TODO: Implement {request.description}\","
        },
        {
          "file": "omnimind/src/core/code_generator.py",
          "line": 462,
          "content": "variables[var] = f\"# TODO: {var}\""
        },
        {
          "file": "omnimind/src/core/code_generator.py",
          "line": 708,
          "content": "# TODO: Implement using {best_solution.name}"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 746,
          "content": "# Convert absolute MemCore imports to TODO comments"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 749,
          "content": "r'# TODO: Replace with appropriate import\\n# from \\1 import \\2',"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 762,
          "content": "# TODO: Add actual imports based on module structure"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 765,
          "content": "# TODO: Add exported classes and functions"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 804,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 853,
          "content": "# TODO: Add quick start example"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1069,
          "content": "# TODO: Add actual tests based on module functionality"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1083,
          "content": "# TODO: Add actual usage example"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1168,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1267,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1450,
          "content": "# TODO: Add actual tests based on functionality"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1473,
          "content": "# TODO: Add integration tests"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1492,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1513,
          "content": "# TODO: Add configuration options"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1517,
          "content": "# TODO: Add advanced usage examples"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1627,
          "content": "TODO: Document methods"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1653,
          "content": "TODO: Document components"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1657,
          "content": "TODO: Document data flow"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1674,
          "content": "TODO: Add real-world examples"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1696,
          "content": "# TODO: Import specific components"
        },
        {
          "file": "omnimind/src/agents/open_source_extractor_agent.py",
          "line": 1703,
          "content": "# TODO: Add exports"
        },
        {
          "file": "omnimind/src/agents/open_source_solution_finder.py",
          "line": 455,
          "content": "# TODO: Add actual usage example"
        },
        {
          "file": "omnimind/src/agents/open_source_solution_finder.py",
          "line": 607,
          "content": "replacement_code=\"# TODO: Replace with suggested library\","
        },
        {
          "file": "omnimind/src/adapters/self_learning_adapter.py",
          "line": 13,
          "content": "# TODO: Import specific components"
        },
        {
          "file": "omnimind/src/adapters/self_learning_adapter.py",
          "line": 20,
          "content": "# TODO: Add exports"
        },
        {
          "file": "paraforge/scripts/update-project-description.js",
          "line": 225,
          "content": "- TODO-IMPLEMENTATION.md - Complete implementation checklist"
        }
      ],
      "dependencies": {
        "npm": [
          "@modelcontextprotocol/sdk",
          "playwright",
          "dotenv"
        ]
      }
    },
    "caia": {
      "name": "caia",
      "path": "/Users/MAC/Documents/projects/caia",
      "last_modified": "2025-08-16T20:55:51.639610",
      "size_bytes": 2835582,
      "file_count": 379,
      "directory_count": 252,
      "recent_changes": [],
      "git_info": {
        "commits": [],
        "modified_files": [],
        "untracked_files": [],
        "branches": [
          "main",
          "remotes/origin/main"
        ],
        "current_branch": "main"
      },
      "key_files": {
        "package.json": "packages/modules/autonomy/package.json",
        "requirements.txt": "packages/modules/autonomy/docs/requirements.txt"
      },
      "technologies": [
        "TypeScript",
        "Python",
        "Node.js"
      ],
      "todos": [
        {
          "file": "tools/claude-code-ultimate/aggregate_results.py",
          "line": 92,
          "content": "if '|' in line and '\u2b1c TODO' in line:"
        },
        {
          "file": "tools/claude-code-ultimate/aggregate_results.py",
          "line": 103,
          "content": "line = line.replace('\u2b1c TODO', '\u2705 COMPLETED')"
        },
        {
          "file": "tools/claude-code-ultimate/aggregate_results.py",
          "line": 106,
          "content": "line = line.replace('\u2b1c TODO', '\u274c FAILED')"
        },
        {
          "file": "tools/claude-code-ultimate/aggregate_results.py",
          "line": 109,
          "content": "line = line.replace('\u2b1c TODO', '\u26a0\ufe0f BLOCKED')"
        },
        {
          "file": "tools/claude-code-ultimate/parallel_orchestrator.py",
          "line": 71,
          "content": "if line.startswith('## ') and 'TODO' not in line and 'COMPLETED' not in line:"
        },
        {
          "file": "tools/claude-code-ultimate/parallel_orchestrator.py",
          "line": 76,
          "content": "elif line.startswith('| ') and '\u2b1c TODO' in line and current_category:"
        },
        {
          "file": "tools/claude-code-ultimate/monitor_dashboard.py",
          "line": 64,
          "content": "elif '\u2b1c TODO' in line and line.startswith('|'):"
        },
        {
          "file": "utils/parallel/cc-orchestrator/src/index.ts",
          "line": 611,
          "content": "todos: ['TODO 1', 'TODO 2']"
        },
        {
          "file": "scripts/progress_tracker.py",
          "line": 171,
          "content": "\"published\": 0,  # TODO: Check NPM for published packages"
        },
        {
          "file": "scripts/progress_tracker.py",
          "line": 172,
          "content": "\"building\": 0,    # TODO: Check which packages build successfully"
        },
        {
          "file": "scripts/create-package.js",
          "line": 288,
          "content": "// TODO: Implement agent logic"
        },
        {
          "file": "scripts/create-package.js",
          "line": 345,
          "content": "// TODO: Implement engine transformation"
        },
        {
          "file": "scripts/create-package.js",
          "line": 367,
          "content": "// TODO: Implement utility logic"
        },
        {
          "file": "scripts/create-package.js",
          "line": 382,
          "content": "// TODO: Implement async utility logic"
        },
        {
          "file": "packages/agents/training-system/src/core/decision-engine/DecisionEngine.ts",
          "line": 89,
          "content": "// TODO: Implement expertise weighting based on domain knowledge"
        },
        {
          "file": "packages/agents/training-system/src/core/llm-alliance/SuperIntelligentAgent.ts",
          "line": 313,
          "content": "// TODO: Implement proper semantic similarity"
        },
        {
          "file": "packages/agents/training-system/src/core/llm-alliance/SuperIntelligentAgent.ts",
          "line": 359,
          "content": "vector: [], // TODO: Generate embeddings"
        },
        {
          "file": "packages/agents/training-system/src/core/llm-alliance/SuperIntelligentAgent.ts",
          "line": 373,
          "content": "// TODO: Implement learning mechanism"
        },
        {
          "file": "packages/agents/training-system/src/core/llm-alliance/SuperIntelligentAgent.ts",
          "line": 413,
          "content": "// TODO: Add more detailed metrics"
        },
        {
          "file": "packages/agents/paraforge/scripts/update-project-description.js",
          "line": 225,
          "content": "- TODO-IMPLEMENTATION.md - Complete implementation checklist"
        },
        {
          "file": "packages/utils/cc-orchestrator/src/index.ts",
          "line": 611,
          "content": "todos: ['TODO 1', 'TODO 2']"
        },
        {
          "file": "packages/engines/learning/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "packages/engines/learning/tests/test_self_learning.py",
          "line": 12,
          "content": "# TODO: Add actual tests based on module functionality"
        },
        {
          "file": "packages/engines/learning/examples/basic_usage.py",
          "line": 9,
          "content": "# TODO: Add actual usage example"
        },
        {
          "file": "packages/engines/learning/src/evolux/__init__.py",
          "line": 6,
          "content": "# TODO: Add actual imports based on module structure"
        },
        {
          "file": "packages/engines/learning/src/evolux/__init__.py",
          "line": 9,
          "content": "# TODO: Add exported classes and functions"
        },
        {
          "file": "packages/engines/planning/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "packages/engines/planning/tests/test_smart_planner.py",
          "line": 19,
          "content": "# TODO: Add actual tests based on functionality"
        },
        {
          "file": "packages/engines/planning/tests/test_integration.py",
          "line": 13,
          "content": "# TODO: Add integration tests"
        },
        {
          "file": "packages/engines/planning/examples/basic_usage.py",
          "line": 12,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "packages/engines/planning/examples/advanced_usage.py",
          "line": 12,
          "content": "# TODO: Add configuration options"
        },
        {
          "file": "packages/engines/planning/examples/advanced_usage.py",
          "line": 16,
          "content": "# TODO: Add advanced usage examples"
        },
        {
          "file": "packages/engines/reasoning/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "packages/engines/reasoning/tests/test_deep_reasoner.py",
          "line": 19,
          "content": "# TODO: Add actual tests based on functionality"
        },
        {
          "file": "packages/engines/reasoning/tests/test_integration.py",
          "line": 13,
          "content": "# TODO: Add integration tests"
        },
        {
          "file": "packages/engines/reasoning/examples/basic_usage.py",
          "line": 12,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "packages/engines/reasoning/examples/advanced_usage.py",
          "line": 12,
          "content": "# TODO: Add configuration options"
        },
        {
          "file": "packages/engines/reasoning/examples/advanced_usage.py",
          "line": 16,
          "content": "# TODO: Add advanced usage examples"
        },
        {
          "file": "packages/engines/code-generation/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "packages/engines/code-generation/tests/test_auto_coder.py",
          "line": 19,
          "content": "# TODO: Add actual tests based on functionality"
        },
        {
          "file": "packages/engines/code-generation/tests/test_integration.py",
          "line": 13,
          "content": "# TODO: Add integration tests"
        },
        {
          "file": "packages/engines/code-generation/examples/basic_usage.py",
          "line": 12,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "packages/engines/code-generation/examples/advanced_usage.py",
          "line": 12,
          "content": "# TODO: Add configuration options"
        },
        {
          "file": "packages/engines/code-generation/examples/advanced_usage.py",
          "line": 16,
          "content": "# TODO: Add advanced usage examples"
        },
        {
          "file": "packages/engines/code-generation/src/codeforge/core.py",
          "line": 123,
          "content": "return GeneratedCode(code=f'# TODO: Implement {request.description}', language=request.language, description=request.description)"
        },
        {
          "file": "packages/engines/code-generation/src/codeforge/core.py",
          "line": 229,
          "content": "variables[var] = f'# TODO: {var}'"
        },
        {
          "file": "packages/engines/code-generation/src/codeforge/core.py",
          "line": 330,
          "content": "library_code += f'\\nimport {best_solution.name}\\n\\n# TODO: Implement using {best_solution.name}\\n# See documentation: {best_solution.url}\\n'"
        },
        {
          "file": "packages/engines/workflow/src/flowmaster/orchestrator.py",
          "line": 491,
          "content": "# TODO: Implement full swarm pattern"
        },
        {
          "file": "packages/engines/workflow/src/flowmaster/orchestrator.py",
          "line": 504,
          "content": "# TODO: Implement full hierarchical pattern"
        },
        {
          "file": "packages/modules/autonomy/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "packages/modules/autonomy/tests/test_autonomix.py",
          "line": 19,
          "content": "# TODO: Add actual tests based on functionality"
        },
        {
          "file": "packages/modules/autonomy/tests/test_integration.py",
          "line": 13,
          "content": "# TODO: Add integration tests"
        },
        {
          "file": "packages/modules/autonomy/examples/basic_usage.py",
          "line": 12,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "packages/modules/autonomy/examples/advanced_usage.py",
          "line": 12,
          "content": "# TODO: Add configuration options"
        },
        {
          "file": "packages/modules/autonomy/examples/advanced_usage.py",
          "line": 16,
          "content": "# TODO: Add advanced usage examples"
        }
      ],
      "dependencies": {
        "npm": []
      }
    },
    "scripts": {
      "name": "scripts",
      "path": "/Users/MAC/Documents/projects/scripts",
      "last_modified": "2025-08-16T20:35:18.691353",
      "size_bytes": 30210,
      "file_count": 4,
      "directory_count": 0,
      "recent_changes": [],
      "git_info": {
        "commits": [],
        "modified_files": [],
        "untracked_files": [],
        "branches": [],
        "current_branch": null
      },
      "key_files": {},
      "technologies": [],
      "todos": [],
      "dependencies": {}
    },
    "active": {
      "name": "active",
      "path": "/Users/MAC/Documents/projects/active",
      "last_modified": "2025-08-16T20:35:18.590832",
      "size_bytes": 0,
      "file_count": 0,
      "directory_count": 0,
      "recent_changes": [],
      "git_info": {
        "commits": [],
        "modified_files": [],
        "untracked_files": [],
        "branches": [],
        "current_branch": null
      },
      "key_files": {},
      "technologies": [],
      "todos": [],
      "dependencies": {}
    },
    "MAIN": {
      "name": "MAIN",
      "path": "/Users/MAC/Documents/projects/MAIN",
      "last_modified": "2025-08-16T20:55:51.639610",
      "size_bytes": 2835582,
      "file_count": 379,
      "directory_count": 252,
      "recent_changes": [],
      "git_info": {
        "commits": [],
        "modified_files": [],
        "untracked_files": [],
        "branches": [
          "main",
          "remotes/origin/main"
        ],
        "current_branch": "main"
      },
      "key_files": {
        "package.json": "packages/modules/autonomy/package.json",
        "requirements.txt": "packages/modules/autonomy/docs/requirements.txt"
      },
      "technologies": [
        "TypeScript",
        "Python",
        "Node.js"
      ],
      "todos": [
        {
          "file": "tools/claude-code-ultimate/aggregate_results.py",
          "line": 92,
          "content": "if '|' in line and '\u2b1c TODO' in line:"
        },
        {
          "file": "tools/claude-code-ultimate/aggregate_results.py",
          "line": 103,
          "content": "line = line.replace('\u2b1c TODO', '\u2705 COMPLETED')"
        },
        {
          "file": "tools/claude-code-ultimate/aggregate_results.py",
          "line": 106,
          "content": "line = line.replace('\u2b1c TODO', '\u274c FAILED')"
        },
        {
          "file": "tools/claude-code-ultimate/aggregate_results.py",
          "line": 109,
          "content": "line = line.replace('\u2b1c TODO', '\u26a0\ufe0f BLOCKED')"
        },
        {
          "file": "tools/claude-code-ultimate/parallel_orchestrator.py",
          "line": 71,
          "content": "if line.startswith('## ') and 'TODO' not in line and 'COMPLETED' not in line:"
        },
        {
          "file": "tools/claude-code-ultimate/parallel_orchestrator.py",
          "line": 76,
          "content": "elif line.startswith('| ') and '\u2b1c TODO' in line and current_category:"
        },
        {
          "file": "tools/claude-code-ultimate/monitor_dashboard.py",
          "line": 64,
          "content": "elif '\u2b1c TODO' in line and line.startswith('|'):"
        },
        {
          "file": "utils/parallel/cc-orchestrator/src/index.ts",
          "line": 611,
          "content": "todos: ['TODO 1', 'TODO 2']"
        },
        {
          "file": "scripts/progress_tracker.py",
          "line": 171,
          "content": "\"published\": 0,  # TODO: Check NPM for published packages"
        },
        {
          "file": "scripts/progress_tracker.py",
          "line": 172,
          "content": "\"building\": 0,    # TODO: Check which packages build successfully"
        },
        {
          "file": "scripts/create-package.js",
          "line": 288,
          "content": "// TODO: Implement agent logic"
        },
        {
          "file": "scripts/create-package.js",
          "line": 345,
          "content": "// TODO: Implement engine transformation"
        },
        {
          "file": "scripts/create-package.js",
          "line": 367,
          "content": "// TODO: Implement utility logic"
        },
        {
          "file": "scripts/create-package.js",
          "line": 382,
          "content": "// TODO: Implement async utility logic"
        },
        {
          "file": "packages/agents/training-system/src/core/decision-engine/DecisionEngine.ts",
          "line": 89,
          "content": "// TODO: Implement expertise weighting based on domain knowledge"
        },
        {
          "file": "packages/agents/training-system/src/core/llm-alliance/SuperIntelligentAgent.ts",
          "line": 313,
          "content": "// TODO: Implement proper semantic similarity"
        },
        {
          "file": "packages/agents/training-system/src/core/llm-alliance/SuperIntelligentAgent.ts",
          "line": 359,
          "content": "vector: [], // TODO: Generate embeddings"
        },
        {
          "file": "packages/agents/training-system/src/core/llm-alliance/SuperIntelligentAgent.ts",
          "line": 373,
          "content": "// TODO: Implement learning mechanism"
        },
        {
          "file": "packages/agents/training-system/src/core/llm-alliance/SuperIntelligentAgent.ts",
          "line": 413,
          "content": "// TODO: Add more detailed metrics"
        },
        {
          "file": "packages/agents/paraforge/scripts/update-project-description.js",
          "line": 225,
          "content": "- TODO-IMPLEMENTATION.md - Complete implementation checklist"
        },
        {
          "file": "packages/utils/cc-orchestrator/src/index.ts",
          "line": 611,
          "content": "todos: ['TODO 1', 'TODO 2']"
        },
        {
          "file": "packages/engines/learning/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "packages/engines/learning/tests/test_self_learning.py",
          "line": 12,
          "content": "# TODO: Add actual tests based on module functionality"
        },
        {
          "file": "packages/engines/learning/examples/basic_usage.py",
          "line": 9,
          "content": "# TODO: Add actual usage example"
        },
        {
          "file": "packages/engines/learning/src/evolux/__init__.py",
          "line": 6,
          "content": "# TODO: Add actual imports based on module structure"
        },
        {
          "file": "packages/engines/learning/src/evolux/__init__.py",
          "line": 9,
          "content": "# TODO: Add exported classes and functions"
        },
        {
          "file": "packages/engines/planning/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "packages/engines/planning/tests/test_smart_planner.py",
          "line": 19,
          "content": "# TODO: Add actual tests based on functionality"
        },
        {
          "file": "packages/engines/planning/tests/test_integration.py",
          "line": 13,
          "content": "# TODO: Add integration tests"
        },
        {
          "file": "packages/engines/planning/examples/basic_usage.py",
          "line": 12,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "packages/engines/planning/examples/advanced_usage.py",
          "line": 12,
          "content": "# TODO: Add configuration options"
        },
        {
          "file": "packages/engines/planning/examples/advanced_usage.py",
          "line": 16,
          "content": "# TODO: Add advanced usage examples"
        },
        {
          "file": "packages/engines/reasoning/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "packages/engines/reasoning/tests/test_deep_reasoner.py",
          "line": 19,
          "content": "# TODO: Add actual tests based on functionality"
        },
        {
          "file": "packages/engines/reasoning/tests/test_integration.py",
          "line": 13,
          "content": "# TODO: Add integration tests"
        },
        {
          "file": "packages/engines/reasoning/examples/basic_usage.py",
          "line": 12,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "packages/engines/reasoning/examples/advanced_usage.py",
          "line": 12,
          "content": "# TODO: Add configuration options"
        },
        {
          "file": "packages/engines/reasoning/examples/advanced_usage.py",
          "line": 16,
          "content": "# TODO: Add advanced usage examples"
        },
        {
          "file": "packages/engines/code-generation/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "packages/engines/code-generation/tests/test_auto_coder.py",
          "line": 19,
          "content": "# TODO: Add actual tests based on functionality"
        },
        {
          "file": "packages/engines/code-generation/tests/test_integration.py",
          "line": 13,
          "content": "# TODO: Add integration tests"
        },
        {
          "file": "packages/engines/code-generation/examples/basic_usage.py",
          "line": 12,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "packages/engines/code-generation/examples/advanced_usage.py",
          "line": 12,
          "content": "# TODO: Add configuration options"
        },
        {
          "file": "packages/engines/code-generation/examples/advanced_usage.py",
          "line": 16,
          "content": "# TODO: Add advanced usage examples"
        },
        {
          "file": "packages/engines/code-generation/src/codeforge/core.py",
          "line": 123,
          "content": "return GeneratedCode(code=f'# TODO: Implement {request.description}', language=request.language, description=request.description)"
        },
        {
          "file": "packages/engines/code-generation/src/codeforge/core.py",
          "line": 229,
          "content": "variables[var] = f'# TODO: {var}'"
        },
        {
          "file": "packages/engines/code-generation/src/codeforge/core.py",
          "line": 330,
          "content": "library_code += f'\\nimport {best_solution.name}\\n\\n# TODO: Implement using {best_solution.name}\\n# See documentation: {best_solution.url}\\n'"
        },
        {
          "file": "packages/engines/workflow/src/flowmaster/orchestrator.py",
          "line": 491,
          "content": "# TODO: Implement full swarm pattern"
        },
        {
          "file": "packages/engines/workflow/src/flowmaster/orchestrator.py",
          "line": 504,
          "content": "# TODO: Implement full hierarchical pattern"
        },
        {
          "file": "packages/modules/autonomy/setup.py",
          "line": 32,
          "content": "# TODO: Add actual dependencies"
        },
        {
          "file": "packages/modules/autonomy/tests/test_autonomix.py",
          "line": 19,
          "content": "# TODO: Add actual tests based on functionality"
        },
        {
          "file": "packages/modules/autonomy/tests/test_integration.py",
          "line": 13,
          "content": "# TODO: Add integration tests"
        },
        {
          "file": "packages/modules/autonomy/examples/basic_usage.py",
          "line": 12,
          "content": "# TODO: Add actual usage examples"
        },
        {
          "file": "packages/modules/autonomy/examples/advanced_usage.py",
          "line": 12,
          "content": "# TODO: Add configuration options"
        },
        {
          "file": "packages/modules/autonomy/examples/advanced_usage.py",
          "line": 16,
          "content": "# TODO: Add advanced usage examples"
        }
      ],
      "dependencies": {
        "npm": []
      }
    },
    "APPS": {
      "name": "APPS",
      "path": "/Users/MAC/Documents/projects/APPS",
      "last_modified": "2025-08-16T20:35:18.653775",
      "size_bytes": 3079983,
      "file_count": 282,
      "directory_count": 98,
      "recent_changes": [],
      "git_info": {
        "commits": [],
        "modified_files": [],
        "untracked_files": [],
        "branches": [],
        "current_branch": null
      },
      "key_files": {
        "package.json": "adp/package.json"
      },
      "technologies": [
        "TypeScript",
        "Node.js"
      ],
      "todos": [
        {
          "file": "roulette-community/src/app/layout.tsx",
          "line": 31,
          "content": "// TODO: Get user from auth context when implementing authentication"
        },
        {
          "file": "roulette-community/src/features/currency/service.ts",
          "line": 262,
          "content": "// TODO: Integrate with actual payment processor (Stripe)"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 478,
          "content": "// TODO: Implement actual sending logic"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 492,
          "content": "// TODO: Implement actual sending logic"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 550,
          "content": "upsellRate: 0, // TODO: Calculate"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 551,
          "content": "churnRate: 0, // TODO: Calculate"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 552,
          "content": "reactivationRate: 0, // TODO: Calculate"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 556,
          "content": "refundRate: 0, // TODO: Track refunds"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 557,
          "content": "paymentFailureRate: 0, // TODO: Track failed payments"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 575,
          "content": "// TODO: Implement more sophisticated calculations"
        },
        {
          "file": "roulette-community/src/lib/analytics/metrics.ts",
          "line": 621,
          "content": "// TODO: Implement growth calculations"
        }
      ],
      "dependencies": {
        "npm": [
          "@sats/core",
          "express",
          "socket.io",
          "ioredis",
          "bull",
          "pg",
          "winston",
          "zod",
          "uuid"
        ]
      }
    }
  },
  "recent_decisions": [
    {
      "id": "20250817_082156",
      "timestamp": "2025-08-17T08:21:56.408876",
      "project": "admin",
      "task": "Claude Session Started",
      "status": "started",
      "details": "New context-aware session started with ID: session_20250817_082156. Admin system loaded and ready.",
      "completion_percentage": 0,
      "type": "progress"
    }
  ],
  "summary": {
    "total_projects": 8,
    "active_projects": 0,
    "total_commits": 0,
    "total_todos": 202,
    "total_recent_changes": 0
  },
  "changes_since_last": {
    "new_projects": [
      "old-projects",
      "APPS",
      "docs",
      "scripts",
      "MAIN",
      "standalone-apps",
      "caia",
      "active"
    ],
    "removed_projects": [],
    "new_commits": 0,
    "new_todos": 0,
    "new_decisions": 1
  }
}